{
    "root": true,
    "parser": "@typescript-eslint/parser",
    "plugins": ["@typescript-eslint"],
    "extends": [
        "plugin:@typescript-eslint/recommended",
        "plugin:unicorn/recommended",
        "prettier",
        "prettier/@typescript-eslint"
    ],
    "parserOptions": {
        "ecmaVersion": 2020,
        "sourceType": "module"
    },
    "rules": {
        "quotes": ["error", "single"],
        "unicorn/prevent-abbreviations": "off",
        "padding-line-between-statements": [
            2,
            // Always require blank lines after directive (like 'use-strict'), except between directives
            { "blankLine": "always", "prev": "directive", "next": "*" },
            { "blankLine": "any", "prev": "directive", "next": "directive" },
            // Always require blank lines after import, except between imports
            { "blankLine": "always", "prev": "import", "next": "*" },
            { "blankLine": "any", "prev": "import", "next": "import" },
            // Always require blank lines before and after every sequence of variable declarations and export
            { "blankLine": "always", "prev": "*", "next": ["const", "let", "var", "export"] },
            { "blankLine": "always", "prev": ["const", "let", "var", "export"], "next": "*" },
            {
                "blankLine": "any",
                "prev": ["const", "let", "var", "export"],
                "next": ["const", "let", "var", "export"]
            },
            // Always require blank lines before and after class declaration, if, do/while, switch, try
            { "blankLine": "always", "prev": "*", "next": ["if", "class", "for", "do", "while", "switch", "try"] },
            { "blankLine": "always", "prev": ["if", "class", "for", "do", "while", "switch", "try"], "next": "*" },
            // Always require blank lines before return statements
            { "blankLine": "always", "prev": "*", "next": "return" }
        ],
        "@typescript-eslint/member-delimiter-style": [
            "error",
            {
                "multiline": {
                    "delimiter": "none", // 'none' or 'semi' or 'comma'
                    "requireLast": true
                },
                "singleline": {
                    "delimiter": "semi", // 'semi' or 'comma'
                    "requireLast": false
                }
            }
        ],
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-explicit-any": 1,
        "@typescript-eslint/no-inferrable-types": [
            "warn",
            {
                "ignoreParameters": true
            }
        ],
        "@typescript-eslint/no-unused-vars": "warn"
    }
}
